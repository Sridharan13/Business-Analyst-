# -*- coding: utf-8 -*-
"""Sridharan Business Analyst Intern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_K2V1-wyLIDXUUqW2CRPZqRbDiT5C0dV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

my_walmart= pd.read_excel('/content/Walmart Sales.xlsx')

my_walmart.shape

my_walmart.isnull()

my_walmart.isnull().sum()

#1. Walmart Sales Analysis:

#A. Analyze the performance of sales and revenue at the city and branch level

City_Re=my_walmart.groupby('City')['Quantity'].sum().reset_index()
print(City_Re)

#Sales Quantity for City-wise:

City_Re.plot(kind='bar', x='City', y='Quantity', figsize=(8, 6))
plt.xlabel('City')
plt.ylabel('Total Quantity')
plt.title('Total Quantity Sold by City')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

plt.figure(figsize=(8, 8))
plt.pie(City_Re['Quantity'], labels=City_Re['City'], autopct='%1.1f%%', startangle=140)
plt.title('Total Quantity by City')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

#Sales Unit price for City-wise:

City_Re_1=my_walmart.groupby('City')['Unit price'].sum().reset_index()
print(City_Re_1)

City_Re_1.plot(kind='bar', x='City', y='Unit price', figsize=(8, 6))
plt.xlabel('City')
plt.ylabel('Unit price')
plt.title('Total Unit Sold by City')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
plt.pie(City_Re_1['Unit price'], labels=City_Re_1['City'], autopct='%1.1f%%', startangle=140)
plt.title('Unit price')
plt.axis('equal')
plt.show()

#Sales of Total Revenue for city-wise

City_Re['Total Revenue'] = City_Re['Quantity'] * City_Re_1['Unit price']

print('Total Revenue by City:')
print(City_Re[['City', 'Total Revenue']])

plt.figure(figsize=(10, 6))
plt.bar(City_Re['City'], City_Re['Total Revenue'])
plt.xlabel('City')
plt.ylabel('Total Revenue')
plt.title('Total Revenue by City')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
plt.pie(City_Re['Total Revenue'], labels=City_Re['City'], autopct='%1.1f%%', startangle=140)
plt.title('Total Revenue Distribution by City')
plt.axis('equal')
plt.show()

#Branch Wise Revenue

Branch_Wise_Revenue=my_walmart.groupby('Branch')['Quantity'].sum().reset_index()
print(Branch_Wise_Revenue)

#Sales Quantity for Branch-wise:

plt.figure(figsize=(10, 6))
plt.bar(Branch_Wise_Revenue['Branch'], Branch_Wise_Revenue['Quantity'])
plt.xlabel('Branch')
plt.ylabel('Quantity')
plt.title('Quantity by Branch')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
plt.pie(Branch_Wise_Revenue['Quantity'], labels=Branch_Wise_Revenue['Branch'], autopct='%1.1f%%', startangle=140)
plt.title('Quantity Distribution by Branch')
plt.axis('equal')
plt.show()

#Sales Unit Price for Branch-wise:

Branch_Wise_Revenue1=my_walmart.groupby('Branch')['Unit price'].sum().reset_index()
print(Branch_Wise_Revenue1)

plt.figure(figsize=(10, 6))
plt.bar(Branch_Wise_Revenue1['Branch'], Branch_Wise_Revenue1['Unit price'])
plt.xlabel('Branch')
plt.ylabel('Unit price')
plt.title('Unit price by Branch')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
plt.pie(Branch_Wise_Revenue1['Unit price'], labels=Branch_Wise_Revenue1['Branch'], autopct='%1.1f%%', startangle=140)
plt.title('Unit price Distribution by Branch')
plt.axis('equal')
plt.show()

#Sales Total Revenue for Branch-wise:

Branch_Wise_Revenue['Total Revenue'] = Branch_Wise_Revenue['Quantity'] *Branch_Wise_Revenue1['Unit price']
print('Total Revenue by Branch Wise:')
print(Branch_Wise_Revenue[['Branch', 'Total Revenue']])

plt.figure(figsize=(10, 6))
plt.bar(Branch_Wise_Revenue['Branch'], Branch_Wise_Revenue['Total Revenue'])
plt.xlabel('Branch')
plt.ylabel('Total Revenue')
plt.title('Total Revenue by Branch Wise:')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
plt.pie(Branch_Wise_Revenue['Total Revenue'], labels=Branch_Wise_Revenue['Branch'], autopct='%1.1f%%', startangle=140)
plt.title('Total Revenue Distribution by Branch')
plt.axis('equal')

# b)The average price of an item sold at each branch of the city

Avg_price = my_walmart.groupby(['City', 'Branch'])['Unit price'].mean().reset_index()
print('Average Price by Branch:')
print(Avg_price)

plt.figure(figsize=(8, 8))
plt.pie(Avg_price.groupby('City')['Unit price'].sum(), labels=Avg_price['City'].unique(), autopct='%1.1f%%', startangle=140)
plt.title('Monthly Sales Distribution')
plt.axis('equal')
plt.show()

# c) Analyze the performance of sales and revenue,Month over Month across the Productline, Gender, and Payment Method, and identify the focus areas to get better sales forApril 2019

my_walmart['Date'] = pd.to_datetime(my_walmart['Date'])

# Add month column
my_walmart['Month'] = my_walmart['Date'].dt.month

# Monthly sales by product line
monthly_sales = my_walmart.groupby(['Month', 'Product line'])['Quantity'].sum().reset_index()
print('Monthly Sales by Product Line:')
print(monthly_sales)

# Pivot the data for better visualization
product_pivot = monthly_sales.pivot(index='Month', columns='Product line', values='Quantity')

# Plotting the pie chart
plt.figure(figsize=(10, 8))
plt.pie(monthly_sales.groupby('Product line')['Quantity'].sum(), labels=monthly_sales['Product line'].unique(), autopct='%1.1f%%', startangle=140)
plt.title('Monthly Sales Distribution by Product Line')
plt.axis('equal')
plt.show()

# Create separate dataframes for each gender
male_data = Gender_monthly[Gender_monthly['Gender'] == 'Male']
female_data = Gender_monthly[Gender_monthly['Gender'] == 'Female']

# Set the width of the bars
bar_width = 0.35

# Set the position of the bars on the x-axis
r1 = range(len(male_data))
r2 = [x + bar_width for x in r1]

# Plotting the bar chart
plt.figure(figsize=(10, 6))
plt.bar(r1, male_data['Quantity'], color='blue', width=bar_width, edgecolor='grey', label='Male')
plt.bar(r2, female_data['Quantity'], color='pink', width=bar_width, edgecolor='grey', label='Female')

# Add xticks on the middle of the group bars
plt.xlabel('Month', fontweight='bold')
plt.ylabel('Total Quantity', fontweight='bold')
plt.xticks([r + bar_width / 2 for r in range(len(male_data))], male_data['Month'])
# Create legend & Show graphic
plt.legend()
plt.title('Monthly Sales by Gender')
plt.show()

# Separate data for each gender
male_data = Gender_monthly[Gender_monthly['Gender'] == 'Male']
female_data = Gender_monthly[Gender_monthly['Gender'] == 'Female']

# Labels for the pie chart
labels = ['Male', 'Female']

# Data for the pie chart
sizes = [male_data['Quantity'].sum(), female_data['Quantity'].sum()]

# Colors for each section
colors = ['blue', 'pink']

# Plotting the pie chart
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Monthly Sales Distribution by Gender')
plt.axis('equal')
plt.show()

# Monthly sales by payment method
Payment_monthly = my_walmart.groupby(['Month', 'Payment'])['Quantity'].sum().reset_index()
print('\nMonthly Sales by Payment Method:')
print(Payment_monthly)

# Pivot the data for better visualization
payment_pivot = Payment_monthly.pivot(index='Month', columns='Payment', values='Quantity')

# Plotting the bar chart
payment_pivot.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.xlabel('Month')
plt.ylabel('Total Quantity')
plt.title('Monthly Sales by Payment Method')
plt.xticks(rotation=45)
plt.legend(title='Payment Method')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
plt.pie(Payment_monthly.groupby('Payment')['Quantity'].sum(), labels=Payment_monthly['Payment'].unique(), autopct='%1.1f%%', startangle=140)
plt.title('Monthly Sales Distribution by Payment Method')
plt.axis('equal')
plt.show()